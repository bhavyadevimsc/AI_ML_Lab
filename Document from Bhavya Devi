{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e39c342f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Formatted Array:\n",
      "[[0.7243 0.6028 0.9574]\n",
      " [0.6038 0.3146 0.9656]\n",
      " [0.6937 0.1341 0.8814]\n",
      " [0.2028 0.1838 0.8504]\n",
      " [0.8978 0.7942 0.4908]\n",
      " [0.6378 0.8889 0.4173]\n",
      " [0.9953 0.6683 0.3183]\n",
      " [0.485  0.6482 0.4199]\n",
      " [0.0423 0.6524 0.5007]\n",
      " [0.7458 0.4948 0.878 ]\n",
      " [0.8623 0.785  0.2002]\n",
      " [0.1829 0.7854 0.7953]\n",
      " [0.2529 0.0976 0.5505]\n",
      " [0.1681 0.5234 0.8165]\n",
      " [0.3269 0.2413 0.9715]\n",
      " [0.483  0.7822 0.1631]\n",
      " [0.4296 0.1962 0.8656]\n",
      " [0.1072 0.2006 0.762 ]\n",
      " [0.3775 0.3142 0.7872]\n",
      " [0.6875 0.0003 0.936 ]\n",
      " [0.4679 0.5318 0.7108]\n",
      " [0.7363 0.8978 0.092 ]\n",
      " [0.0893 0.8139 0.0302]\n",
      " [0.6153 0.718  0.9198]\n",
      " [0.1245 0.4341 0.4955]\n",
      " [0.3134 0.3926 0.6213]\n",
      " [0.9575 0.7575 0.5137]\n",
      " [0.3564 0.1973 0.1535]\n",
      " [0.1403 0.4939 0.328 ]\n",
      " [0.2655 0.944  0.9709]\n",
      " [0.7105 0.8372 0.1991]\n",
      " [0.9457 0.8599 0.8105]\n",
      " [0.4398 0.7767 0.749 ]\n",
      " [0.0081 0.9778 0.6384]\n",
      " [0.4011 0.5204 0.8098]\n",
      " [0.2288 0.0617 0.1834]\n",
      " [0.7799 0.2916 0.266 ]\n",
      " [0.0647 0.5423 0.079 ]\n",
      " [0.3638 0.0896 0.1394]\n",
      " [0.0383 0.5761 0.5158]\n",
      " [0.879  0.348  0.4196]\n",
      " [0.4171 0.1623 0.7971]\n",
      " [0.055  0.5091 0.3786]\n",
      " [0.7006 0.5435 0.8264]\n",
      " [0.9    0.6126 0.2729]\n",
      " [0.2092 0.0913 0.5999]\n",
      " [0.7839 0.9478 0.0599]\n",
      " [0.7287 0.6008 0.7703]\n",
      " [0.2234 0.944  0.329 ]\n",
      " [0.7707 0.7789 0.0694]\n",
      " [0.2298 0.9988 0.8162]\n",
      " [0.067  0.8112 0.5315]\n",
      " [0.2866 0.8535 0.6173]\n",
      " [0.2705 0.3752 0.7709]\n",
      " [0.1416 0.4326 0.396 ]\n",
      " [0.121  0.609  0.3856]\n",
      " [0.9248 0.068  0.5678]\n",
      " [0.3819 0.8353 0.4512]\n",
      " [0.2823 0.6533 0.3463]\n",
      " [0.621  0.5914 0.2539]\n",
      " [0.5175 0.4074 0.3603]\n",
      " [0.7127 0.8257 0.7185]\n",
      " [0.7878 0.8092 0.6556]\n",
      " [0.3679 0.1798 0.588 ]\n",
      " [0.42   0.2196 0.9683]\n",
      " [0.5234 0.4674 0.4039]\n",
      " [0.0128 0.628  0.9531]\n",
      " [0.8417 0.9243 0.8036]\n",
      " [0.334  0.3775 0.522 ]\n",
      " [0.9833 0.7883 0.924 ]\n",
      " [0.9914 0.4578 0.0699]\n",
      " [0.5824 0.1209 0.5448]\n",
      " [0.7879 0.3171 0.0697]\n",
      " [0.7959 0.0647 0.9037]\n",
      " [0.2021 0.4029 0.5691]\n",
      " [0.6397 0.2104 0.3516]\n",
      " [0.4234 0.1476 0.72  ]\n",
      " [0.7383 0.0088 0.3127]\n",
      " [0.2977 0.333  0.3173]\n",
      " [0.2808 0.5001 0.8254]\n",
      " [0.1535 0.3121 0.2359]\n",
      " [0.6573 0.9574 0.6175]\n",
      " [0.1366 0.5946 0.3742]\n",
      " [0.4455 0.7596 0.7286]\n",
      " [0.3802 0.0679 0.0149]\n",
      " [0.004  0.6002 0.2957]\n",
      " [0.8603 0.7153 0.3404]\n",
      " [0.8124 0.6499 0.0236]\n",
      " [0.3726 0.6393 0.5821]\n",
      " [0.5727 0.99   0.3939]\n",
      " [0.2212 0.0901 0.0555]\n",
      " [0.8102 0.4324 0.2684]\n",
      " [0.9067 0.6839 0.2644]\n",
      " [0.6733 0.5583 0.0122]\n",
      " [0.2398 0.6974 0.6305]\n",
      " [0.4727 0.5467 0.87  ]\n",
      " [0.2711 0.0017 0.6782]\n",
      " [0.2011 0.3554 0.674 ]\n",
      " [0.0898 0.6658 0.3684]\n",
      " [0.6413 0.4855 0.601 ]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Create some sample data (replace this with your dataset)\n",
    "data = np.random.rand(100, 3)  # 100 samples with 3 features\n",
    "np.set_printoptions(precision=4, suppress=True)\n",
    "print(\"Formatted Array:\")\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43176e07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.4711 0.5178 0.5202] [0.2854 0.2776 0.281 ]\n",
      "[[ 0.8871  0.3061  1.556 ]\n",
      " [ 0.4648 -0.732   1.5851]\n",
      " [ 0.7799 -1.3821  1.2855]\n",
      " [-0.9401 -1.2032  1.1751]\n",
      " [ 1.4951  0.9955 -0.1049]\n",
      " [ 0.584   1.3368 -0.3664]\n",
      " [ 1.8366  0.5418 -0.7187]\n",
      " [ 0.0485  0.4698 -0.3573]\n",
      " [-1.5025  0.4848 -0.0697]\n",
      " [ 0.9623 -0.0831  1.2733]\n",
      " [ 1.3705  0.9624 -1.1391]\n",
      " [-1.0099  0.964   0.979 ]\n",
      " [-0.7644 -1.5139  0.1079]\n",
      " [-1.0618  0.0199  1.0543]\n",
      " [-0.5052 -0.9962  1.6063]\n",
      " [ 0.0417  0.9524 -1.2713]\n",
      " [-0.1455 -1.1587  1.2294]\n",
      " [-1.2751 -1.1429  0.8604]\n",
      " [-0.3279 -0.7335  0.95  ]\n",
      " [ 0.7581 -1.8641  1.4799]\n",
      " [-0.0113  0.0505  0.6784]\n",
      " [ 0.9293  1.3689 -1.5241]\n",
      " [-1.3379  1.0667 -1.7443]\n",
      " [ 0.5053  0.7209  1.4221]\n",
      " [-1.2145 -0.3018 -0.0879]\n",
      " [-0.5527 -0.4512  0.3596]\n",
      " [ 1.7041  0.8634 -0.0234]\n",
      " [-0.4018 -1.1546 -1.3054]\n",
      " [-1.159  -0.0862 -0.6843]\n",
      " [-0.7203  1.5352  1.6041]\n",
      " [ 0.8387  1.1505 -1.1429]\n",
      " [ 1.6627  1.2322  1.033 ]\n",
      " [-0.1098  0.9325  0.8144]\n",
      " [-1.6224  1.6569  0.4207]\n",
      " [-0.2453  0.0094  1.0306]\n",
      " [-0.8489 -1.6429 -1.1988]\n",
      " [ 1.0817 -0.8148 -0.9049]\n",
      " [-1.424   0.0882 -1.5704]\n",
      " [-0.3761 -1.5426 -1.3556]\n",
      " [-1.5164  0.21   -0.0158]\n",
      " [ 1.4291 -0.6117 -0.3582]\n",
      " [-0.1893 -1.2809  0.9853]\n",
      " [-1.4578 -0.0313 -0.5042]\n",
      " [ 0.804   0.0924  1.0897]\n",
      " [ 1.5026  0.3414 -0.8805]\n",
      " [-0.9177 -1.5366  0.2836]\n",
      " [ 1.096   1.5487 -1.6386]\n",
      " [ 0.9025  0.2989  0.8899]\n",
      " [-0.8681  1.5352 -0.6808]\n",
      " [ 1.0497  0.9405 -1.6046]\n",
      " [-0.8455  1.7325  1.0536]\n",
      " [-1.4158  1.0567  0.0401]\n",
      " [-0.6463  1.2092  0.3454]\n",
      " [-0.7028 -0.5137  0.8923]\n",
      " [-1.1547 -0.307  -0.4421]\n",
      " [-1.2266  0.3285 -0.4791]\n",
      " [ 1.5897 -1.6203  0.1692]\n",
      " [-0.3124  1.1434 -0.2456]\n",
      " [-0.6614  0.4881 -0.6191]\n",
      " [ 0.5252  0.2649 -0.9482]\n",
      " [ 0.1624 -0.3978 -0.5692]\n",
      " [ 0.8465  1.109   0.7055]\n",
      " [ 1.1096  1.0495  0.4819]\n",
      " [-0.3615 -1.2177  0.2412]\n",
      " [-0.1791 -1.0743  1.5946]\n",
      " [ 0.1832 -0.1817 -0.4139]\n",
      " [-1.6058  0.3968  1.5408]\n",
      " [ 1.2986  1.4643  1.0086]\n",
      " [-0.4805 -0.5056  0.0062]\n",
      " [ 1.7945  0.9743  1.4373]\n",
      " [ 1.8231 -0.2161 -1.6028]\n",
      " [ 0.3899 -1.4297  0.0875]\n",
      " [ 1.1099 -0.723  -1.6036]\n",
      " [ 1.1379 -1.6324  1.3648]\n",
      " [-0.9426 -0.4139  0.1738]\n",
      " [ 0.5908 -1.1074 -0.6003]\n",
      " [-0.1672 -1.3338  0.7111]\n",
      " [ 0.9363 -1.8335 -0.7388]\n",
      " [-0.6075 -0.6658 -0.7225]\n",
      " [-0.6666 -0.064   1.0861]\n",
      " [-1.1127 -0.7413 -1.0122]\n",
      " [ 0.6524  1.5834  0.3463]\n",
      " [-1.1719  0.2764 -0.5197]\n",
      " [-0.0896  0.8709  0.7417]\n",
      " [-0.3186 -1.6209 -1.7987]\n",
      " [-1.6366  0.2965 -0.7993]\n",
      " [ 1.3637  0.7114 -0.64  ]\n",
      " [ 1.1957  0.4758 -1.7678]\n",
      " [-0.3452  0.4375  0.22  ]\n",
      " [ 0.356   1.701  -0.4499]\n",
      " [-0.8754 -1.5407 -1.6541]\n",
      " [ 1.1882 -0.3079 -0.8963]\n",
      " [ 1.5262  0.5982 -0.9108]\n",
      " [ 0.7086  0.1456 -1.8084]\n",
      " [-0.8104  0.6469  0.3923]\n",
      " [ 0.0057  0.1039  1.2448]\n",
      " [-0.7007 -1.8592  0.5621]\n",
      " [-0.9461 -0.5851  0.5472]\n",
      " [-1.3359  0.5332 -0.5403]\n",
      " [ 0.5964 -0.1166  0.2873]]\n"
     ]
    }
   ],
   "source": [
    "# Step 2: Standardize the data\n",
    "mean = np.mean(data, axis=0)\n",
    "std_dev = np.std(data, axis=0)\n",
    "standardized_data = (data - mean) / std_dev\n",
    "print (mean, std_dev)\n",
    "print(standardized_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea61f21c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 (3, 3)\n",
      "[[ 1.0101  0.1117 -0.0731]\n",
      " [ 0.1117  1.0101 -0.0606]\n",
      " [-0.0731 -0.0606  1.0101]]\n"
     ]
    }
   ],
   "source": [
    "# Step 3: Compute the covariance matrix\n",
    "covariance_matrix = np.cov(standardized_data, rowvar=False)\n",
    "size_cc = covariance_matrix.size\n",
    "shape_cc = covariance_matrix.shape\n",
    "print (size_cc, shape_cc)\n",
    "print(covariance_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c7506e44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.8974 0.9571 1.1758]\n",
      "[[-0.7368  0.2581 -0.625 ]\n",
      " [ 0.6655  0.4403 -0.6027]\n",
      " [-0.1196  0.8599  0.4962]]\n"
     ]
    }
   ],
   "source": [
    "# Step 4: Compute the eigenvalues and eigenvectors of the covariance matrix\n",
    "eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n",
    "print(eigenvalues)\n",
    "print(eigenvectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6de0189c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.1758 0.9571 0.8974]\n",
      "[[-0.625   0.2581 -0.7368]\n",
      " [-0.6027  0.4403  0.6655]\n",
      " [ 0.4962  0.8599 -0.1196]]\n"
     ]
    }
   ],
   "source": [
    "# Step 5: Sort eigenvalues and corresponding eigenvectors in descending order\n",
    "sorted_indices = np.argsort(eigenvalues)[::-1]\n",
    "eigenvalues = eigenvalues[sorted_indices]\n",
    "eigenvectors = eigenvectors[:, sorted_indices]\n",
    "print(eigenvalues)\n",
    "print(eigenvectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4146c356",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 6: Choose the number of components (or a threshold for explained variance)\n",
    "n_components = 2  # Choose the number of principal components\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "917bca3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.625   0.2581]\n",
      " [-0.6027  0.4403]\n",
      " [ 0.4962  0.8599]]\n"
     ]
    }
   ],
   "source": [
    "# Step 7: Select the top 'n_components' eigenvectors\n",
    "selected_eigenvectors = eigenvectors[:, :n_components]\n",
    "print(selected_eigenvectors)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6eece490",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 8: Project the data onto the selected eigenvectors to obtain the principal components\n",
    "final_result = np.dot(standardized_data, selected_eigenvectors)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "22c16666",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Result after PCA:\n",
      "[[ 0.0331  1.7018]\n",
      " [ 0.9372  1.1607]\n",
      " [ 0.9834  0.6981]\n",
      " [ 1.8957  0.2381]\n",
      " [-1.5864  0.734 ]\n",
      " [-1.3524  0.4242]\n",
      " [-1.8309  0.0945]\n",
      " [-0.4908 -0.0879]\n",
      " [ 0.6123 -0.2343]\n",
      " [ 0.0804  1.3067]\n",
      " [-2.0018 -0.2021]\n",
      " [ 0.5359  1.0057]\n",
      " [ 1.4437 -0.7711]\n",
      " [ 1.1747  0.6414]\n",
      " [ 1.7131  0.8123]\n",
      " [-1.2308 -0.6631]\n",
      " [ 1.3992  0.5095]\n",
      " [ 1.9126 -0.0924]\n",
      " [ 1.1184  0.4094]\n",
      " [ 1.384   0.6475]\n",
      " [ 0.3133  0.6027]\n",
      " [-2.162  -0.4681]\n",
      " [-0.6723 -1.3756]\n",
      " [-0.0446  1.6708]\n",
      " [ 0.8973 -0.5219]\n",
      " [ 0.7958 -0.0321]\n",
      " [-1.5969  0.7998]\n",
      " [ 0.2993 -1.7346]\n",
      " [ 0.4367 -0.9256]\n",
      " [ 0.3208  1.8695]\n",
      " [-1.7847 -0.2598]\n",
      " [-1.2693  1.86  ]\n",
      " [-0.0893  1.0826]\n",
      " [ 0.224   0.6727]\n",
      " [ 0.659   0.8271]\n",
      " [ 0.926  -1.9734]\n",
      " [-0.6339 -0.8578]\n",
      " [ 0.0576 -1.6791]\n",
      " [ 0.4921 -1.9421]\n",
      " [ 0.8132 -0.3124]\n",
      " [-0.7022 -0.2086]\n",
      " [ 1.3792  0.2345]\n",
      " [ 0.6798 -0.8236]\n",
      " [-0.0175  1.1853]\n",
      " [-1.5816 -0.2191]\n",
      " [ 1.6403 -0.6695]\n",
      " [-2.4314 -0.4443]\n",
      " [-0.3027  1.1299]\n",
      " [-0.7206 -0.1335]\n",
      " [-2.0191 -0.6949]\n",
      " [ 0.007   1.4507]\n",
      " [ 0.2678  0.1344]\n",
      " [-0.1535  0.6627]\n",
      " [ 1.1916  0.3598]\n",
      " [ 0.6873 -0.8134]\n",
      " [ 0.3308 -0.5839]\n",
      " [ 0.067  -0.1577]\n",
      " [-0.6158  0.2116]\n",
      " [-0.188  -0.4881]\n",
      " [-0.9583 -0.5632]\n",
      " [-0.1442 -0.6227]\n",
      " [-0.8474  1.3135]\n",
      " [-1.0869  1.1628]\n",
      " [ 1.0795 -0.4221]\n",
      " [ 1.5506  0.852 ]\n",
      " [-0.2104 -0.3887]\n",
      " [ 1.5288  1.0853]\n",
      " [-1.1937  1.8472]\n",
      " [ 0.608  -0.3413]\n",
      " [-0.9956  2.1281]\n",
      " [-1.8044 -1.003 ]\n",
      " [ 0.6614 -0.4537]\n",
      " [-1.0536 -1.411 ]\n",
      " [ 0.9499  0.7485]\n",
      " [ 0.9248 -0.276 ]\n",
      " [ 0.0004 -0.8514]\n",
      " [ 1.2612 -0.0189]\n",
      " [ 0.1534 -1.201 ]\n",
      " [ 0.4225 -1.0713]\n",
      " [ 0.9941  0.7338]\n",
      " [ 0.6399 -1.484 ]\n",
      " [-1.1902  1.1634]\n",
      " [ 0.308  -0.6276]\n",
      " [-0.1009  0.9982]\n",
      " [ 0.2835 -2.3427]\n",
      " [ 0.4476 -0.9791]\n",
      " [-1.5985  0.1148]\n",
      " [-1.9111 -1.0021]\n",
      " [ 0.0612  0.2927]\n",
      " [-1.4709  0.454 ]\n",
      " [ 0.655  -2.3268]\n",
      " [-1.0017 -0.5997]\n",
      " [-1.7663 -0.1259]\n",
      " [-1.4278 -1.3082]\n",
      " [ 0.3112  0.4131]\n",
      " [ 0.5514  1.1177]\n",
      " [ 1.8374 -0.5161]\n",
      " [ 1.2154 -0.0313]\n",
      " [ 0.2455 -0.5746]\n",
      " [-0.1599  0.3497]]\n"
     ]
    }
   ],
   "source": [
    "# Step 9: Print the final result\n",
    "print(\"Final Result after PCA:\")\n",
    "print(final_result)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9e323cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Step 10: Visualize the results (for 2D data)\n",
    "if n_components == 2:\n",
    "    plt.scatter(final_result[:, 0], final_result[:, 1])\n",
    "    plt.xlabel('Principal Component 1')\n",
    "    plt.ylabel('Principal Component 2')\n",
    "    plt.title('PCA Result')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b27f7446",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
